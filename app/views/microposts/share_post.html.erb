<h2 style="text-align: left;">Share this <%= @micropost.category.titlecase.tr("_", " ") %></h2>

<div class="row" style="margin-bottom:10px;">
	<div >
		<%= link_to "< Post page", @micropost %>
		<div style="position: relative;">
			<img class="new_image_bg" id="image_bg" src="<%= @micropost.picture.url %>" />
			<div id="overlay_box" class="overlay_container" style="top: 0px; left: 0px;">
				<img id="overlay_image" src="" draggable="false"/>
				<div id="handle_bottom_right" class="overlay_handle" ></div>
			</div>
		</div>
		<div>
			Overlays (logos and banners):
			<span class="arrow glyphicon glyphicon-chevron-left" id="arrow-prev-overlay"></span>
			<p id="overlay-name" style="display: inline-block;"></p>
			<span class="arrow glyphicon glyphicon-chevron-right" id="arrow-next-overlay"></span>
			<% if @overlays.count <= 1 %>
				<span class="mini-error" >You don't have any overlays set up yet!</span>
			<% end %>
		</div>
		<%= link_to "Click here to manage your overlays", "/overlays" %>
	</div>
</div>

<%= form_tag(share_post_path(@micropost.id), method: :post, id: "shareContainer") do %>

	<%= text_field_tag "overlay[id]", "", :id => "overlay_input_id", style: "", class: "overlay_input" %>
	<%= text_field_tag "overlay[left]", "", :id => "overlay_input_left", style: "", class: "overlay_input" %>
	<%= text_field_tag "overlay[top]", "", :id => "overlay_input_top", style: "", class: "overlay_input" %>
	<%= text_field_tag "overlay[width]", "", :id => "overlay_input_width", style: "", class: "overlay_input" %>
	<%= text_field_tag "overlay[height]", "", :id => "overlay_input_height", style: "", class: "overlay_input" %>

	<h2 style="text-align: left; margin-bottom: 0px;">Post caption: </h2>
	<p>"<%= @micropost.content %>"</p>
	<div class="pop-button" style="margin-bottom: 10px;" id="useOriginalText">Use/edit original caption</div>
	<%= text_area_tag :message, nil, :id => "inputText", :maxlength => 240 %>
	
	<%= link_to "Click here to manage social media accounts", '/accounts/edit' %>
	<% Account.platform_array.each do |platform| %>
		<%= render :partial => 'accounts_list', locals: { platform: platform }%>
	<% end %>


  	<div>
			<%= submit_tag "Share", class: "pop-button hidden", id: "share-button" %>
			<div id="micropost-missing-fields" class="pop-button pop-button-grey" style="display: block; margin: 5px 0;">Share</div>
			<ul style="text-align: left;">
				<li id="missing-text">Missing text</li>
				<li id="missing-pages">Missing pages to share to</li>
			</ul>
		</div>
<% end %>

<script>
	$('#useOriginalText').click(function() {
	  $( "#inputText" ).val("<%= escape_javascript(raw(@micropost.content)) %>");
	  check_fields();
	});

	$( "input[type='checkbox']" ).change(function() {
	  check_fields();
	});

	$("#inputText").on("change keyup paste", function(){
		check_fields();
	})

	function check_fields(){
		text = document.getElementById("inputText");
		var str_length = text.value.length;

		var checkboxes = document.getElementsByName('pages[]');
		var pageChecked = false;

		for(var i = 0; i < checkboxes.length; i++) {
		    if(checkboxes[i].type.toLowerCase() == 'checkbox') {
		        if(checkboxes[i].checked == true){
		        	pageChecked = true;
		        }
		    }
		}

		if(str_length > 0 && pageChecked == true){
			all_fields();
		}else{
			missing_fields(str_length, pageChecked);
		}
	}

	function missing_fields(str_length, pageChecked){
		if(str_length > 0){
			$('#missing-text').addClass('hidden');
		}else{
			$('#missing-text').removeClass('hidden');
		}

		if(pageChecked){
			$('#missing-pages').addClass('hidden');
		}else{
			$('#missing-pages').removeClass('hidden');
		}

		$('#share-button').addClass('hidden');
		$('#micropost-missing-fields').removeClass('hidden');
	}
	function all_fields(){
		$('#missing-text').addClass('hidden');
		$('#missing-pages').addClass('hidden');
		$('#share-button').removeClass('hidden');
		$('#micropost-missing-fields').addClass('hidden');
	}

	//Overlay
	var overlay_arr = <%= raw @overlays.to_json %>;
	var overlay_index = 0;

	var overlay = {
		og_width: 0,
		og_height: 0,
		overlay_width: 0,
		overlay_height: 0,
		left: 0,
		top: 0,
		img_url: "",
		elem: document.getElementById("overlay_image"),
		box: document.getElementById("overlay_box"),
		handle: document.getElementById("handle_bottom_right"),
		name_elem: document.getElementById("overlay-name"),
		prev_arrow: document.getElementById("arrow-prev-overlay"),
		next_arrow: document.getElementById("arrow-next-overlay"),
		moving: false,
		resizing: false,
		mouse_offset_left: 0,
		mouse_offset_top: 0,
		setOverlayNameAndImage: function(){
			this.name_elem.innerHTML = escapeHtml(  overlay_arr[overlay_index][0] );
			this.elem.setAttribute( "src", escapeHtml( overlay_arr[overlay_index][1] ) );
			if(overlay_arr[overlay_index][1] == ""){
				this.handle.style.display = "none";
			}else{
				this.handle.style.display = "block";
			}
			ratio = this.og_width / this.og_height;

			console.log("Change");
			//Make sure sizing is within background image
			if( this.og_width >= bg_img.img_width && this.og_height <= bg_img.img_height ){
				console.log("1");
				this.overlay_width = bg_img.img_width;
				this.overlay_height = this.overlay_width / ratio;
			}else if( this.og_height >= bg_img.img_height && this.og_width <= bg_img.img_width ){
				console.log("2");
				this.overlay_height = bg_img.img_height;
				this.overlay_width = this.overlay_height * ratio;
			}else if( this.og_width >= bg_img.img_width && this.og_height >= bg_img.img_height ){
				console.log("3");
				var w1 = bg_img.img_width;
				var w2 = Math.round(bg_img.img_height * ratio);
				if( w1 < w2){
					this.overlay_width = w1;
					this.overlay_height = Math.round(w1 / ratio);
				}else{
					this.overlay_width = w2;
					this.overlay_height = bg_img.img_height;
				}
			}else{
				console.log("4");
				this.overlay_width = this.og_width;
				this.overlay_height = this.og_height;
			}
			this.box.style.width = this.overlay_width + "px";
			this.box.style.height = this.overlay_height + "px";
			this.elem.style.width = this.overlay_width + "px";
			this.elem.style.height = this.overlay_height + "px";
			this.box.style.left = "0px";
			this.box.style.top = "0px";
		}
	}

	function loadOverlay(){
		if (overlay_arr[overlay_index][1] == "") {
			overlay.setOverlayNameAndImage();
		}else{
			var newImg = new Image();
			newImg.addEventListener("load", function () {
				overlay.og_width = newImg.width;
				overlay.og_height = newImg.height;
		    overlay.setOverlayNameAndImage();
			});
			newImg.src = overlay_arr[overlay_index][1];
		}
		overlay.elem.addEventListener('mousedown', function(e) {
			overlay.moving = true;
			overlay.mouse_offset_left = parseInt(overlay.box.style.left) - e.clientX;
			overlay.mouse_offset_top = parseInt(overlay.box.style.top) - e.clientY;
		}, true);
		overlay.handle.addEventListener('mousedown', function(e) {
			overlay.resizing = true;
			overlay.mouse_offset_left = e.clientX;
			overlay.mouse_offset_top = e.clientY;
		}, true);
		overlay.prev_arrow.addEventListener('mousedown', function(e) {
			if(overlay_index > 0){
				overlay_index -= 1;
			}else{
				overlay_index = overlay_arr.length - 1;
			}
			change_overlay();
		}, true);
		overlay.next_arrow.addEventListener('mousedown', function(e) {
			if(overlay_index < overlay_arr.length - 1){
				overlay_index += 1;
			}else{
				overlay_index = 0;
			}
			change_overlay();
		}, true);
	}

	function change_overlay(){
		if(overlay_arr[overlay_index][1] == ""){
			overlay.og_width = 0;
			overlay.og_height = 0;
	    	overlay.setOverlayNameAndImage();
		}else{
			var newImg = new Image();
			newImg.addEventListener("load", function () {
				overlay.og_width = newImg.width;
				overlay.og_height = newImg.height;
		    overlay.setOverlayNameAndImage();
			});
			newImg.src = overlay_arr[overlay_index][1];
		}
	}

	var bg_img = {
		elem: document.getElementById("image_bg"),
		og_width: 0,
		og_height: 0,
		img_width: 0,
		img_height: 0
	}

	function load_bg_image(){
		image = document.getElementById( "image_bg" );
		var newImg = new Image();
		newImg.addEventListener("load", function () {
			bg_img.og_width = newImg.width;
			bg_img.og_height = newImg.height;
			bg_img.img_width = image.offsetWidth;
			bg_img.img_height = image.offsetHeight;
	    loadOverlay();
		});
		newImg.src = image.getAttribute("src");
	}

	load_bg_image();

	function getImgSize(imgSrc) {
    var newImg = new Image();
		newImg.src = imgSrc;
		return [ newImg.width, newImg.height ];
	}

	//mouse events
	document.addEventListener('mouseup', function() {
	  	overlay.moving = false;
	  	if(overlay.resizing){
	  		overlay.overlay_width = parseInt(overlay.box.style.width);
				overlay.overlay_height = parseInt(overlay.box.style.height);
				overlay.resizing = false;
	  	}
	  	updateOverlayDimensions();
			overlay.left = 0;
			overlay.top = 0;
	}, true);

	document.addEventListener('mousemove', function(e) {
	    event.preventDefault();
	    if (overlay.moving) {
    		var overlay_left = parseInt(overlay.box.style.left);
    		var overlay_top = parseInt(overlay.box.style.top);
    		var overlay_width = Math.round(overlay.overlay_width);
    		var overlay_height = Math.round(overlay.overlay_height);
    		var offset_limit_left = overlay.mouse_offset_left;
    		var offset_limit_top = overlay.mouse_offset_top;
    		var bg_width = bg_img.img_width;
    		var bg_height = bg_img.img_height;

    		if( overlay_left <= 0 && ( e.clientX + offset_limit_left ) <= 0 ){
    			//left bound
    			overlay.box.style.left = '0px';
    		}else if( overlay_left + overlay_width >= bg_width && ((e.clientX + offset_limit_left + overlay_width) >= bg_width ) ){
    			//right bound
    			overlay.box.style.left = (bg_width - overlay_width) + 'px';
    		}else{
    			overlay.box.style.left = (e.clientX + offset_limit_left + 'px');
    		}

    		if( overlay_top <= 0 && ( e.clientY + offset_limit_top ) <= 0 ){
    			//top bound
    			console.log("top");
    			overlay.box.style.top = '0px';
    		}else if( overlay_top + overlay_height >= bg_height && ((e.clientY + offset_limit_top + overlay_height) >= bg_height ) ){
    			//bottom bound
    			console.log("bottom");
    			overlay.box.style.top = (bg_height - overlay_height) + 'px';
    		}else{
    			console.log("vertical");
    			overlay.box.style.top = (e.clientY + offset_limit_top) + 'px';
    		}
	   	}else if(overlay.resizing){
	   		var ratio = overlay.overlay_width / overlay.overlay_height;
	   		var initial_left = overlay.mouse_offset_left;
	   		var overlay_width = Math.round(overlay.overlay_width);
	   		var overlay_height = Math.round(overlay.overlay_height);
	   		var bg_width = bg_img.img_width;
	   		var bg_height = bg_img.img_height;

	   		if( overlay_width + (e.clientX - initial_left) >= bg_width - parseInt(overlay.box.style.left) && (overlay_height + (e.clientX - initial_left)/ratio) < bg_height - parseInt(overlay.box.style.top) ){
	   			console.log("1");
				//if mouse is past right edge but not below bottom edge
				var new_width = bg_width - parseInt(overlay.box.style.left);

			}else if( (overlay_height + (e.clientX - initial_left)/ratio) >= bg_height - parseInt(overlay.box.style.top) && overlay_width + (e.clientX - initial_left) < bg_width - parseInt(overlay.box.style.left) ){
				console.log("2");
				//if mouse is below bottom edge but not past right edge
				var new_width = ( bg_height - parseInt(overlay.box.style.top) ) * ratio;

			}else if( overlay_width + (e.clientX - initial_left) >= bg_width - parseInt(overlay.box.style.left) && (overlay_height + (e.clientX - initial_left)/ratio) >= bg_height - parseInt(overlay.box.style.top) ){
				console.log("3");
				//if mouse is past both, take smaller width
				if( bg_width - parseInt(overlay.box.style.left) < (bg_height - parseInt(overlay.box.style.top)) * ratio ){
					var new_width = bg_width - parseInt(overlay.box.style.left);
				}else{
					var new_width = (bg_height - parseInt(overlay.box.style.top) ) * ratio;
				}
				
			}else{
				console.log("4");
				var new_width = overlay_width + (e.clientX - initial_left);
			}

	   	overlay.box.style.width = new_width + 'px';
			overlay.box.style.height = Math.round(new_width/ratio)+'px';
			overlay.elem.style.width = new_width + 'px';
			overlay.elem.style.height = Math.round(new_width/ratio)+'px';
	   	}
	}, true);

	function updateOverlayDimensions(){
		var scale = bg_img.og_width / bg_img.img_width;
		$("#overlay_input_id").val(overlay_arr[overlay_index][2]);
		$("#overlay_input_left").val(Math.round(overlay.box.offsetLeft*scale));
		$("#overlay_input_top").val(Math.round(overlay.box.offsetTop*scale));
		$("#overlay_input_width").val(Math.round(overlay.overlay_width*scale));
		$("#overlay_input_height").val(Math.round(overlay.overlay_height*scale));
	}

</script>