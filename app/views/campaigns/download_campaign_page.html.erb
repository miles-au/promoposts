<div class="container">
	<h2 style="text-align: left;">Download campaign: <%= link_to @campaign.name, @campaign %></h2>

		<%= form_tag(download_assets_path(@campaign.id), method: :post, id: "shareContainer" ) do %>

			<hr>
			<h4>Edit all overlays:</h4>
			<div class="row" >
				<div class="col-md-6 col-sm-12">
					<%= select_tag nil, options_for_select(@overlay_select), id: "update_overlay_id" %>
				</div>
				<div class="col-md-6 col-sm-12">
					<%= select_tag nil, options_for_select(@overlay_locations), id: "update_overlay_location" %>
				</div>
			</div>
			<div style="text-align: center; margin: 10px 0px;">
				<div class="btn-submit" style="max-width: 500px; width: 100%; text-align: center;" onclick="updateOverlays();" >Update</div>
			</div>

			<hr>

			<div style="text-align: center;">
				<%= submit_tag "Download all posts", class: "btn-submit" %>
			</div>

			<% @campaign.microposts.each do |micropost| %>
				<h3 style="text-align: left;"><%= micropost.category.titlecase.tr("_", " ") %></h3>
				<div style="position: relative;">
					<img class="new_image_bg" id="<%= micropost.id %>_image" src="<%= micropost.picture.url %>" />
					<div id="overlay_box_<%= micropost.id %>" class="overlay_container" style="top: 0px; left: 0px;">
						<img id="overlay_image_<%= micropost.id %>" src="" draggable="false"/>
						<div id="overlay_handle_<%= micropost.id %>" class="overlay_handle"></div>
					</div>
				</div>

				<div>
					Overlays (logos and banners):
					<span class="arrow arrow-prev-overlay glyphicon glyphicon-chevron-left" id="<%= micropost.id %>-prev"></span>
					<p id="overlay_name_<%= micropost.id %>" style="display: inline-block;"></p>
					<span class="arrow arrow-next-overlay glyphicon glyphicon-chevron-right"  id="<%= micropost.id %>-next"></span>
					<% if @overlays.count <= 1 %>
						<span class="mini-error" >You don't have any overlays set up yet!</span>
					<% end %>
				</div>
				<%= text_field_tag "microposts[#{micropost.id}][overlay][id]", "", :id => "overlay_input_id_#{micropost.id}", style: "", class: "overlay_input" %>
				<%= text_field_tag "microposts[#{micropost.id}][overlay][left]", "", :id => "overlay_input_left_#{micropost.id}", style: "", class: "overlay_input" %>
				<%= text_field_tag "microposts[#{micropost.id}][overlay][top]", "", :id => "overlay_input_top_#{micropost.id}", style: "", class: "overlay_input" %>
				<%= text_field_tag "microposts[#{micropost.id}][overlay][width]", "", :id => "overlay_input_width_#{micropost.id}", style: "", class: "overlay_input" %>
				<%= text_field_tag "microposts[#{micropost.id}][overlay][height]", "", :id => "overlay_input_height_#{micropost.id}", style: "", class: "overlay_input" %>

				<hr>
			<% end %>

			<div style="text-align: center;">
				<%= submit_tag "Download all posts", class: "btn-submit" %>
			</div>

		<% end %>

</div>

<script>
	//Overlay
	var overlay_arr = <%= raw @overlays.to_json %>;
	var bg_images_arr = <%= raw @bg_images.to_json %>;
	var overlay_obj_arr = [];

	var active_overlay = {
		moving: false,
		resizing: false,
		overlay: null,
		mouse_offset_left: 0,
		mouse_offset_top: 0
	};

	function Overlay( elem, img_url, overlay_index, og_width, og_height, handle, name_elem, bg_img, micropost_id){
		this.og_width = og_width;
		this.og_height = og_height;
		this.ratio = this.og_width / this.og_height;
		this.overlay_width = 0;
		this.overlay_height = 0;
		this.left = 0;
		this.top = 0;
		this.img_url = img_url;
		this.overlay_index = overlay_index;
		this.elem = elem;
		this.box = elem.parentNode;
		this.handle = handle;
		this.name_elem = name_elem;
		this.bg_img = bg_img
		this.micropost_id = micropost_id;
		this.prev_arrow = document.getElementById(micropost_id.toString().concat("-prev"));
		this.next_arrow = document.getElementById(micropost_id.toString().concat("-next"));
	}

	Overlay.prototype.setOverlayNameAndImage = function() {
		this.name_elem.innerHTML = escapeHtml(  overlay_arr[this.overlay_index][0] );
		this.elem.setAttribute( "src", escapeHtml( overlay_arr[this.overlay_index][1] ) );
		if(overlay_arr[this.overlay_index][1] == ""){
			this.handle.style.display = "none";
		}else{
			this.handle.style.display = "block";
		}
			
		this.ratio = this.og_width / this.og_height;

		console.log("Change");
		//Make sure sizing is within background image
		if( this.og_width >= this.bg_img.img_width && this.og_height <= this.bg_img.img_height ){
			console.log("1");
			this.overlay_width = this.bg_img.img_width;
			this.overlay_height = this.overlay_width / this.ratio;
		}else if( this.og_height >= this.bg_img.img_height && this.og_width <= this.bg_img.img_width ){
			console.log("2");
			this.overlay_height = this.bg_img.img_height;
			this.overlay_width = this.overlay_height * this.ratio;
		}else if( this.og_width >= this.bg_img.img_width && this.og_height >= this.bg_img.img_height ){
			console.log("3");
			var w1 = this.bg_img.img_width;
			var w2 = Math.round(this.bg_img.img_height * this.ratio);
			if( w1 < w2){
				this.overlay_width = w1;
				this.overlay_height = Math.round(w1 / this.ratio);
			}else{
				this.overlay_width = w2;
				this.overlay_height = this.bg_img.img_height;
			}
		}else{
			console.log("4");
			this.overlay_width = this.og_width;
			this.overlay_height = this.og_height;
		}

		this.box.style.width = this.overlay_width + "px";
		this.box.style.height = this.overlay_height + "px";
		this.elem.style.width = this.overlay_width + "px";
		this.elem.style.height = this.overlay_height + "px";
		this.box.style.left = "0px";
		this.box.style.top = "0px";
	};

	function loadOverlay(item){
		if (overlay_arr[0][1] == "") {
			setUpImages(item, 0, 0);
		}else{
			var newImg = new Image();
			newImg.addEventListener("load", function () {
		    	setUpImages(item, newImg.width, newImg.height);
			});
			newImg.src = overlay_arr[0][1];
		}
	}

	function change_overlay(overlay){
		if(overlay_arr[overlay.overlay_index][1] == ""){
			overlay.og_width = 0;
			overlay.og_height = 0;
	    overlay.setOverlayNameAndImage();
		}else{
			var newImg = new Image();
			newImg.addEventListener("load", function () {
				overlay.og_width = newImg.width;
				overlay.og_height = newImg.height;
		    overlay.setOverlayNameAndImage();
			});
			newImg.src = overlay_arr[overlay.overlay_index][1];
		}
	}

	function get_overlay_from_platform(platform){
		for (var i = 0; i < platforms.length; i++) {
			if( platforms[i].type == platform ){
		   		return platforms[i].overlay;
		   	}
		}
	}

	function Background_Image( elem, img_index, og_width, og_height, micropost_id){
		this.og_width = og_width;
		this.og_height = og_height;
		this.img_width = 0;
		this.img_height = 0;
		this.img_index = img_index;
		this.elem = elem;
		this.micropost_id = micropost_id;
		this.carousel_container = document.getElementById(micropost_id.toString().concat("_post_carousel"));
		this.radio_buttons_container = document.getElementById(micropost_id.toString().concat("_radio_buttons"));
	}

	Background_Image.prototype.setBackgroundImageDimensions = function() {
		var dimensions = getImgSize(this.elem.getAttribute("src"));
		this.og_width = dimensions[0];
		this.og_height = dimensions[1];
		this.img_width = this.elem.offsetWidth;
		this.img_height = this.elem.offsetHeight;
	}

	function setUpImages(micropost, og_overlay_width, og_overlay_height) {
		var image = new Background_Image( document.getElementById( micropost[0].toString().concat("_image")), 0, 0, 0, micropost[0] );
		image.setBackgroundImageDimensions();
		if(image.prev_arrow){
			image.prev_arrow.addEventListener('mousedown', function(e) {
				//cycle through images
				var current_img = image.carousel_container.getElementsByClassName("active-img")[0];
				if(image.img_index > 0){
					image.img_index  -= 1;
				}else{
					image.img_index = image.carousel_container.getElementsByTagName("img").length - 1;
				}
				var inactives = image.carousel_container.getElementsByClassName("inactive");
				var last_img = image.carousel_container.getElementsByClassName("inactive")[inactives.length-1];
				current_img.classList.remove("active-img");
				current_img.classList.add("inactive");
				image.carousel_container.prepend(last_img);
				show_first(image.carousel_container);
				var newImg = new Image();
				newImg.addEventListener("load", function () {
					image.elem = last_img;
			    	image.overlay.setOverlayNameAndImage();
				});
				newImg.src = last_img.getAttribute("src");
				//cycle through radio buttons
				var radio_buttons = image.radio_buttons_container;
				var current_selection = radio_buttons.firstElementChild;
				var last_selection = radio_buttons.lastChild;
				current_selection.setAttribute( "checked" , false);
				radio_buttons.prepend(last_selection);
				radio_buttons.firstElementChild.setAttribute( "checked", true );
			});
		}
		if(image.next_arrow){
			image.next_arrow.addEventListener('mousedown', function(e) {
				//cycle through images
				var current_img = image.carousel_container.getElementsByClassName("active-img")[0];
				if(image.img_index < image.carousel_container.getElementsByTagName("img").length - 1){
					image.img_index += 1;
				}else{
					image.img_index = 0;
				}
				current_img.classList.remove("active-img");
				current_img.classList.add("inactive");
				image.carousel_container.append(current_img);
				show_first(image.carousel_container);
				var newImg = new Image();
				newImg.addEventListener("load", function () {
					image.elem = image.carousel_container.firstElementChild;
			    	image.overlay.setOverlayNameAndImage();
				});
				newImg.src = image.carousel_container.firstElementChild.getAttribute("src");
				//cycle through radio buttons
				var radio_buttons = image.radio_buttons_container;
				var current_selection = radio_buttons.firstElementChild;
				current_selection.setAttribute( "checked" , false);
				radio_buttons.append(current_selection);
				radio_buttons.firstElementChild.setAttribute( "checked", true );
			});
		}
		// load overlay
		var overlay = new Overlay(document.getElementById("overlay_image_".concat(micropost[0].toString())),overlay_arr[0][1],0,og_overlay_width,og_overlay_height,document.getElementById("overlay_handle_".concat(micropost[0])),document.getElementById("overlay_name_".concat(micropost[0])),image, micropost[0]);
			overlay.bg_img.overlay = overlay;
			overlay.setOverlayNameAndImage();
			<% case @default_location %>
			<% when "nw" %>
				//do nothing
				overlay.left = 0;
				overlay.top = 0;
			<% when "ne" %>
				overlay.left = overlay.bg_img.img_width - overlay.overlay_width
				overlay.top = 0;
			<% when "sw" %>
				overlay.left = 0;
				overlay.top = overlay.bg_img.img_height - overlay.overlay_height
			<% when "se" %>
				overlay.top = overlay.bg_img.img_height - overlay.overlay_height
				overlay.left = overlay.bg_img.img_width - overlay.overlay_width
			<% else %>
				//do nothing
				overlay.left = 0;
				overlay.top = 0;
			<% end %>
			overlay.box.style.left = overlay.left + "px";
			overlay.box.style.top = overlay.top + "px";
			overlay.elem.addEventListener('mousedown', function(e) {
				active_overlay.moving = true;
				active_overlay.overlay = overlay;
				active_overlay.mouse_offset_left = parseInt(active_overlay.overlay.box.style.left) - e.clientX;
				active_overlay.mouse_offset_top = parseInt(active_overlay.overlay.box.style.top) - e.clientY;
			}, true);
			overlay.handle.addEventListener('mousedown', function(e) {
				active_overlay.resizing = true;
				active_overlay.overlay = overlay;
				active_overlay.mouse_offset_left = e.clientX;
				active_overlay.mouse_offset_top = e.clientY;
			}, true);
			overlay.prev_arrow.addEventListener('mousedown', function(e) {
				if(overlay.overlay_index > 0){
					overlay.overlay_index -= 1;
				}else{
					overlay.overlay_index = overlay_arr.length - 1;
				}
				change_overlay(overlay);
			}, true);
			overlay.next_arrow.addEventListener('mousedown', function(e) {
				if(overlay.overlay_index < overlay_arr.length - 1){
					overlay.overlay_index += 1;
				}else{
					overlay.overlay_index = 0;
				}
				change_overlay(overlay);
			}, true);

			// on touch start
			overlay.elem.ontouchstart = function(e){
				active_overlay.moving = true;
				active_overlay.overlay = overlay;
				active_overlay.mouse_offset_left = parseInt(overlay.box.style.left) - e.touches[0].clientX;
				active_overlay.mouse_offset_top = parseInt(overlay.box.style.top) - e.touches[0].clientY;
			};
			overlay.handle.ontouchstart = function(e){
				active_overlay.resizing = true;
				active_overlay.overlay = overlay;
				active_overlay.mouse_offset_left = e.touches[0].clientX;
				active_overlay.mouse_offset_top = e.touches[0].clientY;
			};
			overlay.elem.ontouchmove = function(e){
				adjust(e);
			};
			overlay.handle.ontouchmove = function(e){
				adjust(e);
			};

			// on touch stop
			overlay.elem.ontouchend = function(e){
				release();
			};
			overlay.elem.ontouchcancel = function(e){
				release();
			};
			overlay.handle.ontouchend = function(e){
				release();
			};
			overlay.handle.ontouchcancel = function(e){
				release();
			};

			overlay_obj_arr.push(overlay);
			updateOverlayDimensions(overlay);
	}

	function load_bg_image(item, index){
		image = document.getElementsByClassName( item[0].toString().concat("_image"));
		var newImg = new Image();
		newImg.addEventListener("load", function () {
	    	loadOverlay(item);
		});
		newImg.src = item[1];
	}

	//show first image
	function show_first(container){
		if(container.firstElementChild){
			container.firstElementChild.classList.remove("inactive");
			container.firstElementChild.classList.add("active-img");
		}
	}

	var carousels = document.getElementsByClassName("post_carousel_container");
	for(var carousel_i = 0; carousel_i < carousels.length; carousel_i++)
	{
	   show_first(carousels[carousel_i]);
	}
	var radio_buttons = document.getElementsByClassName("carousel_radio_buttons");
	for(var radio_buttons_i = 0; radio_buttons_i < radio_buttons.length; radio_buttons_i++)
	{
	   radio_buttons[radio_buttons_i].firstElementChild.setAttribute( "checked", true );
	}

	bg_images_arr.forEach(load_bg_image);

	function getImgSize(imgSrc) {
    	var newImg = new Image();
		newImg.src = imgSrc;
		return [ newImg.width, newImg.height ];
	}

	//mouse events
	document.addEventListener('mouseup', function() {
	  	release();
	}, true);

	// mouse release
	function release(){
		active_overlay.moving = false;
	  	if(active_overlay.resizing){
	  		active_overlay.overlay.overlay_width = parseInt(active_overlay.overlay.box.style.width);
				active_overlay.overlay.overlay_height = parseInt(active_overlay.overlay.box.style.height);
				active_overlay.resizing = false;
	  	}
	  	if(active_overlay.overlay){
	  		updateOverlayDimensions(active_overlay.overlay);
	  	}
		active_overlay.overlay = null;
		active_overlay.left = 0;
		active_overlay.top = 0;
	};

	// mouse move
	document.addEventListener('mousemove', function(e) {
		adjust(e);
	}, true);

	function adjust(e){
		event.preventDefault();
		xCoord = e.clientX || e.touches[0].clientX;
		yCoord = e.clientY || e.touches[0].clientY;

    if (active_overlay.moving) {
  		var overlay_left = parseInt(active_overlay.overlay.box.style.left);
  		var overlay_top = parseInt(active_overlay.overlay.box.style.top);
  		var overlay_width = Math.round(active_overlay.overlay.overlay_width);
  		var overlay_height = Math.round(active_overlay.overlay.overlay_height);
  		var offset_limit_left = active_overlay.mouse_offset_left;
  		var offset_limit_top = active_overlay.mouse_offset_top;
  		var bg_width = active_overlay.overlay.bg_img.img_width;
  		var bg_height = active_overlay.overlay.bg_img.img_height;

  		if( overlay_left <= 0 && ( xCoord + offset_limit_left ) <= 0 ){
  			//left bound
  			active_overlay.overlay.box.style.left = '0px';
  		}else if( overlay_left + overlay_width >= bg_width && ((xCoord + offset_limit_left + overlay_width) >= bg_width ) ){
  			//right bound
  			active_overlay.overlay.box.style.left = (bg_width - overlay_width) + 'px';
  		}else{
  			active_overlay.overlay.box.style.left = (xCoord + offset_limit_left + 'px');
  		}

  		if( overlay_top <= 0 && ( yCoord + offset_limit_top ) <= 0 ){
  			//top bound
  			console.log("top");
  			active_overlay.overlay.box.style.top = '0px';
  		}else if( overlay_top + overlay_height >= bg_height && ((yCoord + offset_limit_top + overlay_height) >= bg_height ) ){
  			//bottom bound
  			console.log("bottom");
  			active_overlay.overlay.box.style.top = (bg_height - overlay_height) + 'px';
  		}else{
  			console.log("vertical");
  			active_overlay.overlay.box.style.top = (yCoord + offset_limit_top) + 'px';
  		}
   	}else if(active_overlay.resizing){
   		var ratio = active_overlay.overlay.ratio;
   		var initial_left = active_overlay.mouse_offset_left;
   		var overlay_width = Math.round(active_overlay.overlay.overlay_width);
   		var overlay_height = Math.round(active_overlay.overlay.overlay_height);
   		var bg_width = active_overlay.overlay.bg_img.img_width;
   		var bg_height = active_overlay.overlay.bg_img.img_height;

   		if( overlay_width + (xCoord - initial_left) >= bg_width - parseInt(active_overlay.overlay.box.style.left) && (overlay_height + (xCoord - initial_left)/ratio) < bg_height - parseInt(active_overlay.overlay.box.style.top) ){
   			console.log("1");
			//if mouse is past right edge but not below bottom edge
			var new_width = bg_width - parseInt(active_overlay.overlay.box.style.left);

		}else if( (overlay_height + (xCoord - initial_left)/ratio) >= bg_height - parseInt(active_overlay.overlay.box.style.top) && overlay_width + (xCoord - initial_left) < bg_width - parseInt(active_overlay.overlay.box.style.left) ){
			console.log("2");
			//if mouse is below bottom edge but not past right edge
			var new_width = ( bg_height - parseInt(active_overlay.overlay.box.style.top) ) * ratio;

		}else if( overlay_width + (xCoord - initial_left) >= bg_width - parseInt(active_overlay.overlay.box.style.left) && (overlay_height + (xCoord - initial_left)/ratio) >= bg_height - parseInt(active_overlay.overlay.box.style.top) ){
			console.log("3");
			//if mouse is past both, take smaller width
			if( bg_width - parseInt(active_overlay.overlay.box.style.left) < (bg_height - parseInt(active_overlay.overlay.box.style.top)) * ratio ){
				var new_width = bg_width - parseInt(active_overlay.overlay.box.style.left);
			}else{
				var new_width = (bg_height - parseInt(active_overlay.overlay.box.style.top) ) * ratio;
			}
			
		}else{
			console.log("4");
			var new_width = overlay_width + (xCoord - initial_left);
		}

   		active_overlay.overlay.box.style.width = new_width + 'px';
			active_overlay.overlay.box.style.height = Math.round(new_width/ratio)+'px';
			active_overlay.overlay.elem.style.width = new_width + 'px';
			active_overlay.overlay.elem.style.height = Math.round(new_width/ratio)+'px';
   	}
	};

	function updateOverlayDimensions(overlay){
		// console.log("left", overlay.left);
		// console.log("top", overlay.top);
		// console.log("width", overlay.overlay_width);
		// console.log("height", overlay.overlay_height);
		var scale = overlay.bg_img.og_width / overlay.bg_img.img_width;
		$("#overlay_input_id_".concat(overlay.micropost_id)).val(overlay_arr[overlay.overlay_index][2]);
		$("#overlay_input_left_".concat(overlay.micropost_id)).val(Math.round(overlay.box.offsetLeft*scale));
		$("#overlay_input_top_".concat(overlay.micropost_id)).val(Math.round(overlay.box.offsetTop*scale));
		$("#overlay_input_width_".concat(overlay.micropost_id)).val(Math.round(overlay.overlay_width*scale));
		$("#overlay_input_height_".concat(overlay.micropost_id)).val(Math.round(overlay.overlay_height*scale));
	}

	function updateOverlays(){
	    var update_overlay_id = document.getElementById("update_overlay_id");
	    var update_overlay_location = document.getElementById("update_overlay_location");
	    var update_id = update_overlay_id.options[update_overlay_id.selectedIndex].value;
	    var update_location = update_overlay_location.options[update_overlay_location.selectedIndex].value;
	    for(var j = 0; j < overlay_arr.length; j++){
	    		if(overlay_arr[j][2] == update_id){
	    			var new_index = j;
	    			break;
	    		}
	    	}
	    for(var i = 0; i < overlay_obj_arr.length; i++){
	    	var overlay = overlay_obj_arr[i];
	    	overlay.overlay_index = new_index;
	    	update_over_change(overlay, update_location);
	    }
	}

	function update_over_change(overlay, update_location){
		if(overlay_arr[overlay.overlay_index][1] == ""){
			overlay.og_width = 0;
			overlay.og_height = 0;
	    overlay.setOverlayNameAndImage();
		}else{
			var newImg = new Image();
			newImg.addEventListener("load", function () {
				overlay.og_width = newImg.width;
				overlay.og_height = newImg.height;
		    overlay.setOverlayNameAndImage();
		    switch (update_location) {
				  case "nw":
				    overlay.left = 0;
				    overlay.top = 0;
				    break;
				  case "ne":
				  	overlay.left = overlay.bg_img.img_width - overlay.overlay_width;
				    overlay.top = 0;
				    break;
				  case "sw":
				   	overlay.left = 0;
				    overlay.top = overlay.bg_img.img_height - overlay.overlay_height;
				    break;
				  case "se":
				  	overlay.left = overlay.bg_img.img_width - overlay.overlay_width
				    overlay.top = overlay.bg_img.img_height - overlay.overlay_height
				    break;
				}
			  overlay.box.style.left = overlay.left + "px";
				overlay.box.style.top = overlay.top + "px";
				updateOverlayDimensions(overlay);
			});
			newImg.src = overlay_arr[overlay.overlay_index][1];
		}
	}

</script>